initSidebarItems({"macro":[["assert","Asserts that a boolean expression is `true` at runtime."],["assert_eq","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["assert_ne","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["cfg","Evaluates boolean combinations of configuration flags at compile-time."],["column","Expands to the column number at which it was invoked."],["compile_error","Causes compilation to fail with the given error message when encountered."],["concat","Concatenates literals into a static string slice."],["concat_bytes","Concatenates literals into a byte slice."],["concat_idents","Concatenates identifiers into one identifier."],["const_format_args","Same as [`format_args`], but can be used in some const contexts."],["debug_assert","Asserts that a boolean expression is `true` at runtime."],["debug_assert_eq","Asserts that two expressions are equal to each other."],["debug_assert_ne","Asserts that two expressions are not equal to each other."],["env","Inspects an environment variable at compile time."],["file","Expands to the file name in which it was invoked."],["format_args","Constructs parameters for the other string-formatting macros."],["format_args_nl","Same as [`format_args`], but adds a newline in the end."],["include","Parses a file as an expression or an item according to the context."],["include_bytes","Includes a file as a reference to a byte array."],["include_str","Includes a UTF-8 encoded file as a string."],["line","Expands to the line number on which it was invoked."],["log_syntax","Prints passed tokens into the standard output."],["matches","Returns whether the given expression matches any of the given patterns."],["module_path","Expands to a string that represents the current module path."],["option_env","Optionally inspects an environment variable at compile time."],["panic","Panics the current thread."],["stringify","Stringifies its arguments."],["todo","Indicates unfinished code."],["trace_macros","Enables or disables tracing functionality used for debugging other macros."],["try","Unwraps a result or propagates its error."],["unimplemented","Indicates unimplemented code by panicking with a message of “not implemented”."],["unreachable","Indicates unreachable code."],["write","Writes formatted data into a buffer."],["writeln","Write formatted data into a buffer, with a newline appended."]],"mod":[["alloc","Memory allocation APIs"],["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["arch","SIMD and vendor intrinsics module."],["array","Helper functions and types for fixed-length arrays."],["ascii","Operations on ASCII strings and characters."],["assert_matches","Unstable module containing the unstable `assert_matches` macro."],["async_iter","Composable asynchronous iteration."],["borrow","A module for working with borrowed data."],["cell","Shareable mutable containers."],["char","A character type."],["clone","The `Clone` trait for types that cannot be ‘implicitly copied’."],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["f32","Constants specific to the `f32` single-precision floating point type."],["f64","Constants specific to the `f64` double-precision floating point type."],["ffi","Platform-specific types, as defined by C."],["fmt","Utilities for formatting and printing strings."],["future","Asynchronous basic functionality."],["hash","Generic hashing support."],["hint","Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime."],["i128","Constants for the 128-bit signed integer type."],["i16","Constants for the 16-bit signed integer type."],["i32","Constants for the 32-bit signed integer type."],["i64","Constants for the 64-bit signed integer type."],["i8","Constants for the 8-bit signed integer type."],["intrinsics","Compiler intrinsics."],["isize","Constants for the pointer-sized signed integer type."],["iter","Composable external iteration."],["lazy","Lazy values and one-time initialization of static data."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["num","Numeric traits and functions for the built-in numeric types."],["ops","Overloadable operators."],["option","Optional values."],["panic","Panic support in the standard library."],["panicking","Panic support for libcore"],["pin","Types that pin data to its location in memory."],["prelude","The libcore prelude"],["primitive","This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types."],["ptr","Manually manage memory through raw pointers."],["result","Error handling with the `Result` type."],["simd","Portable SIMD module."],["slice","Slice management and manipulation."],["str","String manipulation."],["sync","Synchronization primitives"],["task","Types and Traits for working with asynchronous tasks."],["time","Temporal quantification."],["u128","Constants for the 128-bit unsigned integer type."],["u16","Constants for the 16-bit unsigned integer type."],["u32","Constants for the 32-bit unsigned integer type."],["u64","Constants for the 64-bit unsigned integer type."],["u8","Constants for the 8-bit unsigned integer type."],["unicode",""],["usize","Constants for the pointer-sized unsigned integer type."]]});