initSidebarItems({"enum":[["ArgumentExtension","Function argument extension options."],["ArgumentPurpose","The special purpose of a function argument."],["AtomicRmwOp","Describes the arithmetic operation in an atomic memory read-modify-write operation."],["Endianness","Endianness of a memory access."],["ExpandedProgramPoint","An expanded program point directly exposes the variants, but takes twice the space to represent."],["ExternalName","The name of an external is either a reference to a user-defined symbol table, or a short sequence of ascii bytes so that test cases do not have to keep track of a symbol table."],["GlobalValueData","Information about a global value declaration."],["HeapStyle","Style of heap including style-specific information."],["KnownSymbol","A well-known symbol."],["LabelValueLoc","The particular location for a value."],["LibCall","The name of a runtime library routine."],["TrapCode","A trap code describing the reason for a trap."],["UserFuncName","An explicit name for a user-defined function, be it defined in code or in CLIF text."],["ValueLabelAssignments","Value label assignements: label starts or value aliases."]],"fn":[["get_probestack_funcref","Get a function reference for the probestack function in `func`."]],"mod":[["condcodes","Condition codes for the Cranelift code generator."],["constant","Constants"],["dfg","Data flow graph tracking Instructions, Values, and blocks."],["dynamic_type","Dynamic IR types"],["entities","Cranelift IR entity references."],["function","Intermediate representation of a function."],["immediates","Immediate operands for Cranelift instructions"],["instructions","Instruction formats and opcodes."],["jumptable","Jump table representation."],["layout","Function layout."],["stackslot","Stack slots."],["types","Common types for the Cranelift code generator."]],"struct":[["AbiParam","Function parameter or return value descriptor."],["ExtFuncData","An external function."],["HeapData","Information about a heap declaration."],["InsertBuilder","Builder that inserts an instruction at the current position."],["MemFlags","Flags for memory operations like load/store."],["ProgramPoint","A `ProgramPoint` represents a position in a function where the live range of an SSA value can begin or end. It can be either:"],["RelSourceLoc","Source location relative to another base source location."],["ReplaceBuilder","Instruction builder that replaces an existing instruction."],["Signature","Function signature."],["SourceLoc","A source location."],["TableData","Information about a table declaration."],["UserExternalName","An external name in a user-defined symbol table."],["ValueLabel","Marked with a label value."],["ValueLabelStart","A label of a Value."]],"trait":[["InstBuilder","Convenience methods for building instructions."],["InstBuilderBase","Base trait for instruction builders."],["InstInserterBase","Base trait for instruction inserters."],["ProgramOrder","Context for ordering program points."]],"type":[["JumpTables","Map of jump tables."]]});