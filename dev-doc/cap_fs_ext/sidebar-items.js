initSidebarItems({"enum":[["FollowSymlinks","Re-export these to allow them to be used with `Reuse`. Should symlinks be followed in the last component of a path?"],["SystemTimeSpec","A value for specifying a time."]],"fn":[["ambient_authority","Return an `AmbientAuthority` value, which allows use of functions that include an `AmbientAuthority` argument."]],"struct":[["AmbientAuthority","Instances of this `AmbientAuthority` type serve to indicate that the [`ambient_authority`] function has been called, indicating that the user has explicitly opted into using ambient authority."],["Metadata","Re-export these to allow them to be used with `Reuse`. Metadata information about a file."],["OpenOptions","Re-export these to allow them to be used with `Reuse`. Options and flags which can be used to configure how a file is opened."]],"trait":[["DirEntryExt","Extension trait for `DirEntry`."],["DirExt","Extension trait for `Dir`."],["FileTypeExt","Extension trait for `FileType`."],["IsFileReadWrite","A trait for the `is_file_read_write` function for `File` types."],["MetadataExt","Extension trait for `Metadata`."],["OpenOptionsFollowExt","Extension trait for `cap_primitives::fs::OpenOptions` which adds `follow`, a function for controlling whether a symlink in the last component of a path is followed."],["OpenOptionsMaybeDirExt","Extension trait for `cap_primitives::fs::OpenOptions` which adds `maybe_dir`, a function for controlling whether an open should attempt to succeed on a directory. On Posix-ish platforms, opening a directory always succeeds, but on Windows, opening a directory needs this option."],["Reopen","A trait for the `reopen` function."]]});