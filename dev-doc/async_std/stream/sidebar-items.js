initSidebarItems({"fn":[["empty","Creates a stream that doesn’t yield any items."],["extend","Extends a collection with the contents of a stream."],["from_fn","Creates a new stream where to produce each new element a provided closure is called."],["from_iter","Converts an iterator into a stream."],["interval","Creates a new stream that yields at a set interval."],["once","Creates a stream that yields a single item."],["pending","Creates a stream that never returns any items."],["repeat","Creates a stream that yields the same item repeatedly."],["repeat_with","Creates a new stream that repeats elements of type `A` endlessly by applying the provided closure."],["successors","Creates a new stream where to produce each new element a closure is called with the previous value."]],"struct":[["Chain","A stream that chains two streams one after another."],["Cloned","A stream that clones the elements of an underlying stream."],["Copied","A stream that copies the elements of an underlying stream."],["Empty","A stream that doesn’t yield any items."],["Filter","A stream to filter elements of another stream with a predicate."],["FlatMap","A stream that maps each element to a stream, and yields the elements of the produced streams."],["Flatten","A stream that flattens one level of nesting in an stream of things that can be turned into streams."],["FromFn","A stream that yields elements by calling a closure."],["FromIter","A stream that was created from iterator."],["Fuse","A stream that yields `None` forever after the underlying stream yields `None` once."],["Inspect","A stream that does something with each element of another stream."],["Interval","A stream representing notifications at fixed interval"],["Map","A stream that maps value of another stream with a function."],["Merge","A stream that merges two other streams into a single stream."],["Once","A stream that yields a single item."],["Pending","A stream that never returns any items."],["Repeat","A stream that yields the same item repeatedly."],["RepeatWith","A stream that repeats elements of type `T` endlessly by applying a provided closure."],["Scan","A stream to maintain state while polling another stream."],["Skip","A stream to skip first n elements of another stream."],["SkipWhile","A stream to skip elements of another stream based on a predicate."],["StepBy","A stream that steps a given amount of elements of another stream."],["Successors","A stream that yields elements by calling an async closure with the previous value as an argument"],["Take","A stream that yields the first `n` items of another stream."],["TakeWhile","A stream that yields elements based on a predicate."],["Timeout","A stream with timeout time set"],["TimeoutError","An error returned when a stream times out."],["Zip","A stream that takes items from two other streams simultaneously."]],"trait":[["DoubleEndedStream","A stream able to yield elements from both ends."],["ExactSizeStream","A stream that knows its exact length."],["Extend","Extends a collection with the contents of a stream."],["FromStream","Conversion from a `Stream`."],["FusedStream","A stream that always continues to yield `None` when exhausted."],["IntoStream","Conversion into a `Stream`."],["Product","Trait to represent types that can be created by multiplying the elements of a stream."],["Stream","A stream of values produced asynchronously."],["StreamExt","Extension methods for `Stream`."],["Sum","Trait to represent types that can be created by summing up a stream."]]});