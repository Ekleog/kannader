initSidebarItems({"fn":[["exponential_search","Exponential searches this sorted slice for a given element."],["exponential_search_by","Binary searches this sorted slice with a comparator function."],["exponential_search_by_key","Binary searches this sorted slice with a key extraction function."]],"struct":[["BinaryGroup","An iterator that will return non-overlapping groups of equal elements, according to the `PartialEq::eq` function in the slice using binary search."],["BinaryGroupBy","An iterator that will return non-overlapping groups in the slice using binary search."],["BinaryGroupByKey","An iterator that will return non-overlapping groups in the slice using binary search."],["BinaryGroupByKeyMut","An iterator that will return non-overlapping mutable groups in the slice using binary search."],["BinaryGroupByMut","An iterator that will return non-overlapping mutable groups in the slice using binary search."],["BinaryGroupMut","An iterator that will return non-overlapping mutable groups of equal elements, according to the `PartialEq::eq` function in the slice using binary search."],["ExponentialGroup","An iterator that will return non-overlapping groups of equal elements, according to the `PartialEq::eq` function in the slice using exponential search."],["ExponentialGroupBy","An iterator that will reutrn non-overlapping groups in the slice using exponential search."],["ExponentialGroupByKey","An iterator that will reutrn non-overlapping groups in the slice using exponential search."],["ExponentialGroupByKeyMut","An iterator that will reutrn non-overlapping mutable groups in the slice using exponential search."],["ExponentialGroupByMut","An iterator that will reutrn non-overlapping mutable groups in the slice using exponential search."],["ExponentialGroupMut","An iterator that will return non-overlapping mutable groups of equal elements, according to the `PartialEq::eq` function in the slice using exponential search."],["LinearGroup","An iterator that will return non-overlapping groups of equal elements in the slice using linear/sequential search."],["LinearGroupBy",""],["LinearGroupByKey","An iterator that will return non-overlapping groups of equal elements in the slice using linear/sequential search."],["LinearGroupByKeyMut","An iterator that will return non-overlapping mutable groups in the slice using linear/sequential search."],["LinearGroupByMut",""],["LinearGroupMut","An iterator that will return non-overlapping mutable groups of equal elements in the slice using linear/sequential search."],["LinearStrGroup","An iterator that will return non-overlapping groups of equal `char` in the `str` using linear/sequential search."],["LinearStrGroupBy","An iterator that will return non-overlapping groups in the `str` using linear/sequential search."],["LinearStrGroupByKey","An iterator that will return non-overlapping groups in the `str` using linear/sequential search."],["LinearStrGroupByKeyMut","An iterator that will return non-overlapping mutable groups in the `str` using linear/sequential search."],["LinearStrGroupByMut","An iterator that will return non-overlapping mutable groups in the `str` using linear/sequential search."],["LinearStrGroupMut","An iterator that will return non-overlapping mutable groups of equal `char` in the `str` using linear/sequential search."]],"trait":[["GroupBy","A convenient trait to construct an iterator returning non-overlapping groups defined by a predicate."],["GroupByMut","A convenient trait to construct an iterator returning non-overlapping mutable groups defined by a predicate."],["StrGroupBy","A convenient trait to construct an iterator returning non-overlapping `str` slices defined by a predicate."],["StrGroupByMut","A convenient trait to construct an iterator returning non-overlapping mutable `str` slices defined by a predicate."]]});